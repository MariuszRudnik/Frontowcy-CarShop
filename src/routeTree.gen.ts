/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CreatorImport } from './routes/creator'
import { Route as IndexImport } from './routes/index'
import { Route as CreatorNewImport } from './routes/creator.new'
import { Route as CreatorCatNameImport } from './routes/creator.$catName'
import { Route as CategoriesSteepIdImport } from './routes/categories/$steepId'

// Create/Update Routes

const CreatorRoute = CreatorImport.update({
  id: '/creator',
  path: '/creator',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CreatorNewRoute = CreatorNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => CreatorRoute,
} as any)

const CreatorCatNameRoute = CreatorCatNameImport.update({
  id: '/$catName',
  path: '/$catName',
  getParentRoute: () => CreatorRoute,
} as any)

const CategoriesSteepIdRoute = CategoriesSteepIdImport.update({
  id: '/categories/$steepId',
  path: '/categories/$steepId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/creator': {
      id: '/creator'
      path: '/creator'
      fullPath: '/creator'
      preLoaderRoute: typeof CreatorImport
      parentRoute: typeof rootRoute
    }
    '/categories/$steepId': {
      id: '/categories/$steepId'
      path: '/categories/$steepId'
      fullPath: '/categories/$steepId'
      preLoaderRoute: typeof CategoriesSteepIdImport
      parentRoute: typeof rootRoute
    }
    '/creator/$catName': {
      id: '/creator/$catName'
      path: '/$catName'
      fullPath: '/creator/$catName'
      preLoaderRoute: typeof CreatorCatNameImport
      parentRoute: typeof CreatorImport
    }
    '/creator/new': {
      id: '/creator/new'
      path: '/new'
      fullPath: '/creator/new'
      preLoaderRoute: typeof CreatorNewImport
      parentRoute: typeof CreatorImport
    }
  }
}

// Create and export the route tree

interface CreatorRouteChildren {
  CreatorCatNameRoute: typeof CreatorCatNameRoute
  CreatorNewRoute: typeof CreatorNewRoute
}

const CreatorRouteChildren: CreatorRouteChildren = {
  CreatorCatNameRoute: CreatorCatNameRoute,
  CreatorNewRoute: CreatorNewRoute,
}

const CreatorRouteWithChildren =
  CreatorRoute._addFileChildren(CreatorRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/creator': typeof CreatorRouteWithChildren
  '/categories/$steepId': typeof CategoriesSteepIdRoute
  '/creator/$catName': typeof CreatorCatNameRoute
  '/creator/new': typeof CreatorNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/creator': typeof CreatorRouteWithChildren
  '/categories/$steepId': typeof CategoriesSteepIdRoute
  '/creator/$catName': typeof CreatorCatNameRoute
  '/creator/new': typeof CreatorNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/creator': typeof CreatorRouteWithChildren
  '/categories/$steepId': typeof CategoriesSteepIdRoute
  '/creator/$catName': typeof CreatorCatNameRoute
  '/creator/new': typeof CreatorNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/creator'
    | '/categories/$steepId'
    | '/creator/$catName'
    | '/creator/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/creator'
    | '/categories/$steepId'
    | '/creator/$catName'
    | '/creator/new'
  id:
    | '__root__'
    | '/'
    | '/creator'
    | '/categories/$steepId'
    | '/creator/$catName'
    | '/creator/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreatorRoute: typeof CreatorRouteWithChildren
  CategoriesSteepIdRoute: typeof CategoriesSteepIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreatorRoute: CreatorRouteWithChildren,
  CategoriesSteepIdRoute: CategoriesSteepIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/creator",
        "/categories/$steepId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/creator": {
      "filePath": "creator.tsx",
      "children": [
        "/creator/$catName",
        "/creator/new"
      ]
    },
    "/categories/$steepId": {
      "filePath": "categories/$steepId.tsx"
    },
    "/creator/$catName": {
      "filePath": "creator.$catName.tsx",
      "parent": "/creator"
    },
    "/creator/new": {
      "filePath": "creator.new.tsx",
      "parent": "/creator"
    }
  }
}
ROUTE_MANIFEST_END */
